/* tslint:disable */
/* eslint-disable */
/**
 * Magnets e-Commerce API
 * API for managing products, orders, and user accounts for the Magnets e-Commerce platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Product,
} from '../models/index';
import {
    ProductFromJSON,
    ProductToJSON,
} from '../models/index';

export interface ProductsIdGetRequest {
    id: string;
}

export interface ProductsPostRequest {
    product: Product;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get a list of products
     */
    async productsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * Get a list of products
     */
    async productsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>> {
        const response = await this.productsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a product by ID
     */
    async productsIdGetRaw(requestParameters: ProductsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling productsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Get a product by ID
     */
    async productsIdGet(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.productsIdGetRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new product
     */
    async productsPostRaw(requestParameters: ProductsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling productsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductToJSON(requestParameters['product']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new product
     */
    async productsPost(product: Product, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.productsPostRaw({ product: product }, initOverrides);
    }

}
